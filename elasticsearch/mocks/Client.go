// Code generated by mockery v1.0.0
package mocks

import context "context"
import elastic "gopkg.in/olivere/elastic.v5"
import elasticsearch "github.com/korfuri/goref/elasticsearch"
import goref "github.com/korfuri/goref"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateFile provides a mock function with given fields: ctx, f
func (_m *Client) CreateFile(ctx context.Context, f elasticsearch.File) (*elastic.IndexResponse, error) {
	ret := _m.Called(ctx, f)

	var r0 *elastic.IndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, elasticsearch.File) *elastic.IndexResponse); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.IndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, elasticsearch.File) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePackage provides a mock function with given fields: ctx, p
func (_m *Client) CreatePackage(ctx context.Context, p *goref.Package) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *goref.Package) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRef provides a mock function with given fields: ctx, r
func (_m *Client) CreateRef(ctx context.Context, r *goref.Ref) (*elastic.IndexResponse, error) {
	ret := _m.Called(ctx, r)

	var r0 *elastic.IndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, *goref.Ref) *elastic.IndexResponse); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.IndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *goref.Ref) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackage provides a mock function with given fields: ctx, docID
func (_m *Client) GetPackage(ctx context.Context, docID string) (*elastic.GetResult, error) {
	ret := _m.Called(ctx, docID)

	var r0 *elastic.GetResult
	if rf, ok := ret.Get(0).(func(context.Context, string) *elastic.GetResult); ok {
		r0 = rf(ctx, docID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.GetResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, docID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
